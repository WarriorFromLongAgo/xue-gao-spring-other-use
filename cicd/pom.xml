<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.xuegao</groupId>
    <artifactId>cicd</artifactId>
    <version>0.0.7-SNAPSHOT</version>

    <name>cicd</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring-boot.version>2.3.7.RELEASE</spring-boot.version>

        <docker.host>http://localhost:2375</docker.host>
        <docker.registry>registry.cn-hangzhou.aliyuncs.com</docker.registry>
        <docker.namespace>hubei-xuegao</docker.namespace>
        <docker.image-warehouse>spring_cicd</docker.image-warehouse>

        <docker.username>18000855903</docker.username>
        <docker.password>qq23612244896</docker.password>

        <dockerfile-maven.version>1.4.13</dockerfile-maven.version>
        <docker-maven-plugin.version>0.40.0</docker-maven-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--    <proxies>-->
    <!--        <proxy>-->
    <!--            <id>optional</id>-->
    <!--            <active>true</active>-->
    <!--            <protocol>http</protocol>-->
    <!--            <username>proxyuser</username>-->
    <!--            <password>proxypass</password>&ndash;&gt;-->
    <!--            <host>192.168.3.54</host>-->
    <!--            <port>80</port>-->
    <!--        </proxy>-->
    <!--    </proxies>-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.3.7.RELEASE</version>
                <configuration>
                    <mainClass>com.xuegao.cicd.CicdApplication</mainClass>
                    <imageName>${project.build.finalName}</imageName>
                    <image>
                        <!--配置镜像名称-->
                        <name>${docker.registry}/boot/${project.name}:${project.version}</name>
                        <!--镜像打包完成后自动推送到镜像仓库-->
                        <!--                        <publish>true</publish>-->
                    </image>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-image</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <username>${docker.username}</username>
                    <password>${docker.password}</password>
                    <repository>${docker.registry}/${docker.namespace}/${docker.image-warehouse}</repository>
                    <!--                    <repository>${docker.registry}</repository>-->
                    <tag>${project.version}</tag>
                    <!--                    使用 maven仓库setting.xml 还是pom文件-->
                    <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                    <!--                    使用 maven仓库setting.xml 可以提交，但是使用 pom文件的不行-->
                    <!--                    <servers>-->
                    <!--                        <server>-->
                    <!--                            <id>registry.cn-hangzhou.aliyuncs.com</id>-->
                    <!--                            <username>18000855903</username>-->
                    <!--                            <password>qq23612244896</password>-->
                    <!--                        </server>-->
                    <!--                    </servers>-->
                    <buildArgs>
                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>

            <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker-maven-plugin.version}</version>
                <configuration>
                    <!--这一部分是为了实现对远程docker容器的控制-->
                    <!--docker主机地址,用于完成docker各项功能,注意是tcp不是http!-->
                    <dockerHost>${docker.host}</dockerHost>
                    <!--docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书-->
                    <!--                    <certPath>${project.basedir}/docker/ssh</certPath>-->
                    <!--这一部分是为了实现docker镜像的构建和推送-->
                    <!--registry地址,用于推送,拉取镜像,我这里用的是阿里的registry-->
                    <registry>${docker.registry}</registry>
                    <!--认证配置,用于私有registry认证,如果忘记了可以去阿里的registry查看-->
                    <authConfig>
                        <push>
                            <username>${docker.username}</username>
                            <password>${docker.password}</password>
                        </push>
                    </authConfig>

                    <images>
                        <image>
                            <name>${docker.registry}/${docker.namespace}/${docker.image-warehouse}:${project.version}
                            </name>
                            <build>
                                <!--使用dockerFile文件-->
                                <dockerFile>${project.basedir}/dockerfile</dockerFile>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
